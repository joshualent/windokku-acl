#!/usr/bin/env bash
set -eo pipefail; [[ $DOKKU_TRACE ]] && set -x

# service-action trigger
# Invoked by service plugins like dokku-postgres as:
#   plugn trigger service-action <phase> <service_type> <service>
# We care only about the "post-create" phase to avoid duplicate runs.

PHASE="$1"
SERVICE_TYPE="$2"
SERVICE="$3"

[[ -z "$PHASE" || -z "$SERVICE_TYPE" || -z "$SERVICE" ]] && exit 0

case "$PHASE" in
  post-create)
    # Resolve user from capture file or fallback to SSH_NAME
    RUN_BASE="/var/run/dokku-acl-auto"
    CREATOR_FILE="$RUN_BASE/services/$SERVICE_TYPE/$SERVICE"
    user=""
    if [[ -s "$CREATOR_FILE" ]]; then
      user="$(cat "$CREATOR_FILE" || true)"
      rm -f "$CREATOR_FILE" || true
    fi
    [[ -z "$user" && -n "$SSH_NAME" ]] && user="$SSH_NAME"

    if [[ -z "$user" ]]; then
      echo "WARN: no user resolved for ${SERVICE_TYPE} service '$SERVICE'; skipped acl:add-service" >&2
      exit 0
    fi

    echo "acl(service-action): phase=$PHASE type=$SERVICE_TYPE service=$SERVICE user=$user" >&2

    # Helper to run a candidate command and treat exit 0/2 and 'already has permissions' as success
    run_add_service() {
      set +e
      local desc="$1"; shift
      echo "acl(service-action): trying [$desc]: $*" >&2
      local out
      out="$($@ 2>&1)"
      local status=$?
      # mirror command output for debugging
      [[ -n "$out" ]] && echo "$out" >&2
      set -e
      if [[ $status -eq 0 ]]; then
        echo "acl(service-action): success (status=$status)" >&2
        return 0
      fi
      if [[ $status -eq 2 ]] || echo "$out" | grep -qi "already has permissions"; then
        echo "acl(service-action): already present (status=$status)" >&2
        return 0
      fi
      echo "acl(service-action): failure (status=$status)" >&2
      return $status
    }

    # Try to run as on-host admin: scrub ssh env and set DOKKU_ON_HOST
    if run_add_service "dokku acl:add-service" env -u SSH_NAME -u SSH_USER -u DOKKU_SSH_USER DOKKU_ON_HOST=1 dokku acl:add-service "$SERVICE_TYPE" "$SERVICE" "$user"; then
      exit 0
    fi

    # Fallback: call the subcommand directly if found
    bases=("$PLUGIN_ENABLED_PATH" "$PLUGIN_AVAILABLE_PATH" "/var/lib/dokku/plugins/enabled" "/var/lib/dokku/plugins/available")
    names=("acl" "dokku-acl")
    for base in "${bases[@]}"; do
      for name in "${names[@]}"; do
        candidate="$base/$name/subcommands/add-service"
        if [[ -x "$candidate" ]]; then
          if run_add_service "direct subcommand $candidate" env -u SSH_NAME -u SSH_USER -u DOKKU_SSH_USER DOKKU_ON_HOST=1 "$candidate" "$SERVICE_TYPE" "$SERVICE" "$user"; then
            exit 0
          fi
        fi
      done
    done

    # Last resort: try with an admin NAME inferred from authorized_keys
    admin_name=""
    if [[ -r "/home/dokku/.ssh/authorized_keys" ]]; then
      admin_name=$(grep -m1 -o 'NAME=[^ ]*' /home/dokku/.ssh/authorized_keys | head -n1 | cut -d= -f2 || true)
    fi
    if [[ -n "$admin_name" ]]; then
      if run_add_service "dokku acl:add-service as admin_name=$admin_name" env SSH_NAME="$admin_name" SSH_USER="root" DOKKU_ON_HOST=1 dokku acl:add-service "$SERVICE_TYPE" "$SERVICE" "$user"; then
        exit 0
      fi
    fi

    echo "WARN: failed to add '$user' to ACL for ${SERVICE_TYPE} service '$SERVICE' after all attempts" >&2
    ;;
  *)
    # Ignore other phases
    ;;
esac

exit 0
